version: '3'

networks:
  micro-service-net:
    driver: bridge
    name: ${DOCKER_APP}-micro-service-net
    external: false

volumes:
  mongodb_data:
    driver: local

services:
  auth:
    build:
      context: ./AuthService
      dockerfile: ./docker/Dockerfile
    container_name: ${DOCKER_APP}-auth-service
    environment:
      API_PORT: 3000
      RPC_USER_PORT: 50000
      RPC_USER_HOST: user
    networks:
      - micro-service-net
    links:
      - mongo
      - user
    volumes:
      - ./AuthService/src:/build/src
      - /build/node_modules
    ports:
      - 3000:3000
  user:
    build:
      context: ./UserService
      dockerfile: ./docker/Dockerfile
    container_name: ${DOCKER_APP}-user-service
    environment:
      API_PORT: 3000
      RPC_PORT: 50000
    networks:
      - micro-service-net
    links:
      - mongo
    volumes:
      - ./UserService/src:/build/src
      - /build/node_modules
    ports:
      - 3001:3000
      - 50001:50000
  product:
    build:
      context: ./ProductService
      dockerfile: ./docker/Dockerfile
    container_name: ${DOCKER_APP}-product-service
    environment:
      API_PORT: 3000
      RPC_PORT: 50000
    networks:
      - micro-service-net
    links:
      - mongo
    volumes:
      - ./ProductService/src:/build/src
      - /build/node_modules
    ports:
      - 3002:3000
      - 50002:50000
  order:
    build:
      context: ./OrderService
      dockerfile: ./docker/Dockerfile
    container_name: ${DOCKER_APP}-order-service
    environment:
      API_PORT: 3000
      RPC_PORT: 50000
    networks:
      - micro-service-net
    links:
      - mongo
    volumes:
      - ./OrderService/src:/build/src
      - /build/node_modules
    ports:
      - 3003:3000
      - 50003:50000
  payment:
    build:
      context: ./PaymentService
      dockerfile: ./docker/Dockerfile
    container_name: ${DOCKER_APP}-payment-service
    environment:
      API_PORT: 3000
      RPC_PORT: 50000
    networks:
      - micro-service-net
    links:
      - mongo
    volumes:
      - ./PaymentService/src:/build/src
      - /build/node_modules
    ports:
      - 3004:3000
      - 50004:50000
  mongo:
    image: mongo
    container_name: ${DOCKER_APP}-mongo
    command: mongod --quiet --logpath /dev/null
    volumes:
      - mongodb_data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=root
      - MONGO_INITDB_DATABASE=project
    networks:
      - micro-service-net
  mongo-express:
    image: mongo-express
    container_name: ${DOCKER_APP}-mongo-express
    ports:
      - ${DOCKER_MONGO_EXPRESS_PORT}:8081
    links:
      - mongo
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo
      - ME_CONFIG_MONGODB_PORT=27017
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
#      - ME_CONFIG_MONGODB_AUTH_DATABASE=project
      - ME_CONFIG_MONGODB_AUTH_USERNAME=root
      - ME_CONFIG_MONGODB_AUTH_PASSWORD=root
      - ME_CONFIG_BASICAUTH_USERNAME=dev
      - ME_CONFIG_BASICAUTH_PASSWORD=dev
    networks:
      - micro-service-net
    depends_on:
      - mongo
#    environment:
#      ME_CONFIG_MONGODB_ADMINUSERNAME: root
#      ME_CONFIG_MONGODB_ADMINPASSWORD: root
  redis:
    image: redis
    container_name: ${DOCKER_APP}-redis
    volumes:
      - ./_docker/data/redis:/data
    command: redis-server --appendonly yes
    networks:
      - micro-service-net